// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (business_id, event_type, payload)
VALUES (?, ?, ?)
RETURNING id, business_id, event_type, payload, created_at, processed_at, status
`

type CreateEventParams struct {
	BusinessID string `json:"business_id"`
	EventType  string `json:"event_type"`
	Payload    string `json:"payload"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.BusinessID, arg.EventType, arg.Payload)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.EventType,
		&i.Payload,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.Status,
	)
	return i, err
}

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoices (id, business_id, amount, currency, status, description)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, business_id, amount, currency, status, description, created_at
`

type CreateInvoiceParams struct {
	ID          string         `json:"id"`
	BusinessID  string         `json:"business_id"`
	Amount      float64        `json:"amount"`
	Currency    string         `json:"currency"`
	Status      string         `json:"status"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.ID,
		arg.BusinessID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Description,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getPendingEvents = `-- name: GetPendingEvents :many
SELECT id, business_id, event_type, payload, created_at, processed_at, status 
FROM events
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT ?
`

func (q *Queries) GetPendingEvents(ctx context.Context, limit int64) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getPendingEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.EventType,
			&i.Payload,
			&i.CreatedAt,
			&i.ProcessedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventAsProcessed = `-- name: MarkEventAsProcessed :exec
UPDATE events
SET status = 'processed',
    processed_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) MarkEventAsProcessed(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, markEventAsProcessed, id)
	return err
}
